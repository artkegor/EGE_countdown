import os
import time

import db
import dotenv

import telebot
import schedule
import threading
from telebot import types
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
dotenv.load_dotenv()
TOKEN = os.getenv('TOKEN')
ADMIN = int(os.getenv('ADMIN'))

bot = telebot.TeleBot(TOKEN)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
subject_buttons = {
    'rus': ('–†—É—Å—Å–∫–∏–π üìï', 'sub_rus'),
    'mat': ('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ üìò', 'sub_mat'),
    'his': ('–ò—Å—Ç–æ—Ä–∏—è üè∞', 'sub_his'),
    'lit': ('–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ üìñ', 'sub_lit'),
    'obs': ('–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ üßë‚Äç‚öñÔ∏è', 'sub_obs'),
    'fiz': ('–§–∏–∑–∏–∫–∞ üöÄ', 'sub_fiz'),
    'inf': ('–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ üíª', 'sub_inf'),
    'him': ('–•–∏–º–∏—è üß™', 'sub_him'),
    'bio': ('–ë–∏–æ–ª–æ–≥–∏—è üê≠', 'sub_bio'),
    'geo': ('–ì–µ–æ–≥—Ä–∞—Ñ–∏—è üó∫', 'sub_geo'),
    'lan': ('–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ üåç', 'sub_lan'),
}

# –î–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤
exam_dates = {
    "rus": datetime(2025, 5, 30),
    "mat": datetime(2025, 5, 27),
    "his": datetime(2025, 5, 23),
    "lit": datetime(2025, 5, 23),
    "obs": datetime(2025, 6, 2),
    "fiz": datetime(2025, 6, 2),
    "inf": datetime(2025, 6, 10),
    "him": datetime(2025, 5, 23),
    "bio": datetime(2025, 6, 5),
    "geo": datetime(2025, 6, 5),
    "lan": datetime(2025, 6, 5)
}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
def subjects_markup(subjects):
    active_subjects = {subject['name'] for subject in subjects if subject['active']}

    markup = types.InlineKeyboardMarkup()

    markup.row(
        types.InlineKeyboardButton(
            f"{subject_buttons['rus'][0]} ‚úÖ" if 'rus' in active_subjects else subject_buttons['rus'][0],
            callback_data=subject_buttons['rus'][1]
        ),
        types.InlineKeyboardButton(
            f"{subject_buttons['mat'][0]} ‚úÖ" if 'mat' in active_subjects else subject_buttons['mat'][0],
            callback_data=subject_buttons['mat'][1]
        )
    )

    markup.row(
        types.InlineKeyboardButton(
            f"{subject_buttons['his'][0]} ‚úÖ" if 'his' in active_subjects else subject_buttons['his'][0],
            callback_data=subject_buttons['his'][1]
        ),
        types.InlineKeyboardButton(
            f"{subject_buttons['lit'][0]} ‚úÖ" if 'lit' in active_subjects else subject_buttons['lit'][0],
            callback_data=subject_buttons['lit'][1]
        )
    )

    markup.row(
        types.InlineKeyboardButton(
            f"{subject_buttons['obs'][0]} ‚úÖ" if 'obs' in active_subjects else subject_buttons['obs'][0],
            callback_data=subject_buttons['obs'][1]
        ),
        types.InlineKeyboardButton(
            f"{subject_buttons['fiz'][0]} ‚úÖ" if 'fiz' in active_subjects else subject_buttons['fiz'][0],
            callback_data=subject_buttons['fiz'][1]
        )
    )

    markup.row(
        types.InlineKeyboardButton(
            f"{subject_buttons['inf'][0]} ‚úÖ" if 'inf' in active_subjects else subject_buttons['inf'][0],
            callback_data=subject_buttons['inf'][1]
        ),
        types.InlineKeyboardButton(
            f"{subject_buttons['him'][0]} ‚úÖ" if 'him' in active_subjects else subject_buttons['him'][0],
            callback_data=subject_buttons['him'][1]
        )
    )

    markup.row(
        types.InlineKeyboardButton(
            f"{subject_buttons['bio'][0]} ‚úÖ" if 'bio' in active_subjects else subject_buttons['bio'][0],
            callback_data=subject_buttons['bio'][1]
        ),
        types.InlineKeyboardButton(
            f"{subject_buttons['geo'][0]} ‚úÖ" if 'geo' in active_subjects else subject_buttons['geo'][0],
            callback_data=subject_buttons['geo'][1]
        )
    )

    markup.add(types.InlineKeyboardButton(
        f"{subject_buttons['lan'][0]} ‚úÖ" if 'lan' in active_subjects else subject_buttons['lan'][0],
        callback_data=subject_buttons['lan'][1]))

    markup.add(types.InlineKeyboardButton('–ì–æ—Ç–æ–≤–æ ‚úÖ', callback_data='done'))

    return markup


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    if not db.get_user(message.chat.id):
        db.add_user(message.chat.id)

    subjects = db.get_subjects(message.chat.id)
    markup = subjects_markup(subjects)

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!\n'
                                      '–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–¥–∞–µ—à—å...', reply_markup=markup)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data.startswith('sub_'):
        subject = call.data.split('_')[1]
        db.add_subject(call.message.chat.id, subject)

        subjects = db.get_subjects(call.message.chat.id)
        markup = subjects_markup(subjects)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–ü—Ä–∏–≤–µ—Ç!\n'
                                   '–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–¥–∞–µ—à—å...',
                              reply_markup=markup)

    elif call.data == 'done':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã ‚úèÔ∏è', callback_data='change'))

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–¢–µ–ø–µ—Ä—å —Ä–æ–≤–Ω–æ –≤ –ø–æ–ª–Ω–æ—á—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π –¥–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤.\n\n'
                                   '–£–¥–∞—á–∏ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ!', reply_markup=markup)
    elif call.data == 'change':
        subjects = db.get_subjects(call.message.chat.id)
        markup = subjects_markup(subjects)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–ü—Ä–∏–≤–µ—Ç!\n'
                                   '–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–¥–∞–µ—à—å...', reply_markup=markup)


# –†–∞—Å—Å—ã–ª–∫–∞
def send_daily():
    users = db.get_all_users()
    for user in users:
        time.sleep(0.1)
        try:
            subjects = user['subjects']
            if subjects:
                message = '<b>–î–Ω–µ–π –¥–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤:</b>\n\n'
                for subject in subjects:
                    exam_date = exam_dates[subject['name']]
                    days_till_exam = (exam_date - datetime.now()).days
                    message += f'{subject_buttons[subject["name"]][0]}: {days_till_exam} –¥–Ω–µ–π.\n\n'
                bot.send_message(user['id'], message, parse_mode='html')
        except:
            continue


# –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ 12 –Ω–æ—á–∏
schedule.every().day.at("00:00").do(send_daily)


def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)


threading.Thread(target=run_schedule, daemon=True).start()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=['admin'])
def admin(message):
    if message.chat.id == ADMIN:
        bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db.count_users()}')


bot.infinity_polling()
